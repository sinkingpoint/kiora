// Code generated by capnpc-go. DO NOT EDIT.

package kioraproto

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type RaftLog capnp.Struct
type RaftLog_log RaftLog
type RaftLog_log_Which uint16

const (
	RaftLog_log_Which_alerts   RaftLog_log_Which = 0
	RaftLog_log_Which_silences RaftLog_log_Which = 1
)

func (w RaftLog_log_Which) String() string {
	const s = "alertssilences"
	switch w {
	case RaftLog_log_Which_alerts:
		return s[0:6]
	case RaftLog_log_Which_silences:
		return s[6:14]

	}
	return "RaftLog_log_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// RaftLog_TypeID is the unique identifier for the type RaftLog.
const RaftLog_TypeID = 0x9633ab50d476eedd

func NewRaftLog(s *capnp.Segment) (RaftLog, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RaftLog(st), err
}

func NewRootRaftLog(s *capnp.Segment) (RaftLog, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RaftLog(st), err
}

func ReadRootRaftLog(msg *capnp.Message) (RaftLog, error) {
	root, err := msg.Root()
	return RaftLog(root.Struct()), err
}

func (s RaftLog) String() string {
	str, _ := text.Marshal(0x9633ab50d476eedd, capnp.Struct(s))
	return str
}

func (s RaftLog) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftLog) DecodeFromPtr(p capnp.Ptr) RaftLog {
	return RaftLog(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftLog) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftLog) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftLog) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftLog) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftLog) Log() RaftLog_log { return RaftLog_log(s) }

func (s RaftLog_log) Which() RaftLog_log_Which {
	return RaftLog_log_Which(capnp.Struct(s).Uint16(0))
}
func (s RaftLog_log) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftLog_log) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftLog_log) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftLog_log) Alerts() (PostAlertsRequest, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != alerts")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PostAlertsRequest(p.Struct()), err
}

func (s RaftLog_log) HasAlerts() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftLog_log) SetAlerts(v PostAlertsRequest) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAlerts sets the alerts field to a newly
// allocated PostAlertsRequest struct, preferring placement in s's segment.
func (s RaftLog_log) NewAlerts() (PostAlertsRequest, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPostAlertsRequest(capnp.Struct(s).Segment())
	if err != nil {
		return PostAlertsRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftLog_log) Silences() (PostSilencesRequest, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != silences")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PostSilencesRequest(p.Struct()), err
}

func (s RaftLog_log) HasSilences() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftLog_log) SetSilences(v PostSilencesRequest) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSilences sets the silences field to a newly
// allocated PostSilencesRequest struct, preferring placement in s's segment.
func (s RaftLog_log) NewSilences() (PostSilencesRequest, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewPostSilencesRequest(capnp.Struct(s).Segment())
	if err != nil {
		return PostSilencesRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaftLog_List is a list of RaftLog.
type RaftLog_List = capnp.StructList[RaftLog]

// NewRaftLog creates a new list of RaftLog.
func NewRaftLog_List(s *capnp.Segment, sz int32) (RaftLog_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[RaftLog](l), err
}

// RaftLog_Future is a wrapper for a RaftLog promised by a client call.
type RaftLog_Future struct{ *capnp.Future }

func (f RaftLog_Future) Struct() (RaftLog, error) {
	p, err := f.Future.Ptr()
	return RaftLog(p.Struct()), err
}
func (p RaftLog_Future) Log() RaftLog_log_Future { return RaftLog_log_Future{p.Future} }

// RaftLog_log_Future is a wrapper for a RaftLog_log promised by a client call.
type RaftLog_log_Future struct{ *capnp.Future }

func (f RaftLog_log_Future) Struct() (RaftLog_log, error) {
	p, err := f.Future.Ptr()
	return RaftLog_log(p.Struct()), err
}
func (p RaftLog_log_Future) Alerts() PostAlertsRequest_Future {
	return PostAlertsRequest_Future{Future: p.Future.Field(0, nil)}
}
func (p RaftLog_log_Future) Silences() PostSilencesRequest_Future {
	return PostSilencesRequest_Future{Future: p.Future.Field(0, nil)}
}

const schema_efede801da2b560c = "x\xda\x12\xb8\xed\xc0b\xc8\xab\xcf\xca\xc0\x14h\xc3\xca" +
	"\xf6\xff\xc3}\xe1U\xc7WN\x9d\xcc\x10(\xcc\xc8\xf8" +
	"\xff\xee\xbb\xb2+\x01\xab\x8d\xa71\x842\xb2321" +
	"0\x08\xd72\xedb`\x14\xaee*g@\x92\x0c\xe4" +
	"fd\xfc\xcf\x13\xa6}\x8b\xf1\xc5\xdb\xf7\x0c\xac\x8c\xec" +
	"\x0c\x0c\xc2w\x99f\x09?e\x02\xb1\x1e2\xd93L" +
	"\xf8_\x94\x98V\xa2\x97\x9cX\xc0\x98W`\x15\x94\x98" +
	"V\xe2c\x9f\x9f\xae\x97\x93\x9f\x1e\xc8\xc1\xcc\xc2\xf3\xff" +
	"?\x0b#\x03\x83\xa0\xa6\x15\x03C\xa0\x0a3c\xa0\x01" +
	"\x13#/\xe3\xbf\xff\"\x8c Q]/\x06\x86@\x1d" +
	"f\xc6@\x0b&F\xfb\xc4\x9c\xd4\xa2\x92bF\x81\xff" +
	"q\xaf&\xfd~\xdb\xb0o*\x03\x03#\xa3\x00\x03\xe3" +
	"\xff\xe2\xcc\x9c\xd4\xbc\xe4\xd4b\x06\x06\x06F\x81\xff\x8b" +
	"U\xc5=\xa6O2\x9c\x09\x93\xc5\xb0\x9d9?=\x80" +
	"\x911\x90\x85\x99\x05\xa4\x04\xe1kA^%\x06&\xf6" +
	"\x9c\xfct@\x00\x00\x00\xff\xff\x81\x8eTz"

func init() {
	schemas.Register(schema_efede801da2b560c,
		0x9395a9c7aa13dff0,
		0x9633ab50d476eedd)
}
