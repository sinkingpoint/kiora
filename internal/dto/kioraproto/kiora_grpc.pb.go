// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: kiora.proto

package kioraproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KioraClient is the client API for Kiora service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KioraClient interface {
	ApplyLog(ctx context.Context, in *KioraLogMessage, opts ...grpc.CallOption) (*KioraLogReply, error)
}

type kioraClient struct {
	cc grpc.ClientConnInterface
}

func NewKioraClient(cc grpc.ClientConnInterface) KioraClient {
	return &kioraClient{cc}
}

func (c *kioraClient) ApplyLog(ctx context.Context, in *KioraLogMessage, opts ...grpc.CallOption) (*KioraLogReply, error) {
	out := new(KioraLogReply)
	err := c.cc.Invoke(ctx, "/kioraproto.Kiora/ApplyLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KioraServer is the server API for Kiora service.
// All implementations must embed UnimplementedKioraServer
// for forward compatibility
type KioraServer interface {
	ApplyLog(context.Context, *KioraLogMessage) (*KioraLogReply, error)
	mustEmbedUnimplementedKioraServer()
}

// UnimplementedKioraServer must be embedded to have forward compatible implementations.
type UnimplementedKioraServer struct {
}

func (UnimplementedKioraServer) ApplyLog(context.Context, *KioraLogMessage) (*KioraLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLog not implemented")
}
func (UnimplementedKioraServer) mustEmbedUnimplementedKioraServer() {}

// UnsafeKioraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KioraServer will
// result in compilation errors.
type UnsafeKioraServer interface {
	mustEmbedUnimplementedKioraServer()
}

func RegisterKioraServer(s grpc.ServiceRegistrar, srv KioraServer) {
	s.RegisterService(&Kiora_ServiceDesc, srv)
}

func _Kiora_ApplyLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KioraLogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KioraServer).ApplyLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kioraproto.Kiora/ApplyLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KioraServer).ApplyLog(ctx, req.(*KioraLogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Kiora_ServiceDesc is the grpc.ServiceDesc for Kiora service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kiora_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kioraproto.Kiora",
	HandlerType: (*KioraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyLog",
			Handler:    _Kiora_ApplyLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kiora.proto",
}
