// Code generated by capnpc-go. DO NOT EDIT.

package kioraproto

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type PostAlertsRequest capnp.Struct

// PostAlertsRequest_TypeID is the unique identifier for the type PostAlertsRequest.
const PostAlertsRequest_TypeID = 0x95be80edfb92ea5e

func NewPostAlertsRequest(s *capnp.Segment) (PostAlertsRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PostAlertsRequest(st), err
}

func NewRootPostAlertsRequest(s *capnp.Segment) (PostAlertsRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PostAlertsRequest(st), err
}

func ReadRootPostAlertsRequest(msg *capnp.Message) (PostAlertsRequest, error) {
	root, err := msg.Root()
	return PostAlertsRequest(root.Struct()), err
}

func (s PostAlertsRequest) String() string {
	str, _ := text.Marshal(0x95be80edfb92ea5e, capnp.Struct(s))
	return str
}

func (s PostAlertsRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PostAlertsRequest) DecodeFromPtr(p capnp.Ptr) PostAlertsRequest {
	return PostAlertsRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PostAlertsRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PostAlertsRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PostAlertsRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PostAlertsRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PostAlertsRequest) Alerts() (Alert_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Alert_List(p.List()), err
}

func (s PostAlertsRequest) HasAlerts() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PostAlertsRequest) SetAlerts(v Alert_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAlerts sets the alerts field to a newly
// allocated Alert_List, preferring placement in s's segment.
func (s PostAlertsRequest) NewAlerts(n int32) (Alert_List, error) {
	l, err := NewAlert_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Alert_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PostAlertsRequest_List is a list of PostAlertsRequest.
type PostAlertsRequest_List = capnp.StructList[PostAlertsRequest]

// NewPostAlertsRequest creates a new list of PostAlertsRequest.
func NewPostAlertsRequest_List(s *capnp.Segment, sz int32) (PostAlertsRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PostAlertsRequest](l), err
}

// PostAlertsRequest_Future is a wrapper for a PostAlertsRequest promised by a client call.
type PostAlertsRequest_Future struct{ *capnp.Future }

func (f PostAlertsRequest_Future) Struct() (PostAlertsRequest, error) {
	p, err := f.Future.Ptr()
	return PostAlertsRequest(p.Struct()), err
}

type Alert capnp.Struct

// Alert_TypeID is the unique identifier for the type Alert.
const Alert_TypeID = 0xc5154448f10c0d22

func NewAlert(s *capnp.Segment) (Alert, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Alert(st), err
}

func NewRootAlert(s *capnp.Segment) (Alert, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Alert(st), err
}

func ReadRootAlert(msg *capnp.Message) (Alert, error) {
	root, err := msg.Root()
	return Alert(root.Struct()), err
}

func (s Alert) String() string {
	str, _ := text.Marshal(0xc5154448f10c0d22, capnp.Struct(s))
	return str
}

func (s Alert) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Alert) DecodeFromPtr(p capnp.Ptr) Alert {
	return Alert(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Alert) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Alert) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Alert) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Alert) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Alert) Labels() (Map, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Map(p.Struct()), err
}

func (s Alert) HasLabels() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Alert) SetLabels(v Map) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLabels sets the labels field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s Alert) NewLabels() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Alert) Annotations() (Map, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Map(p.Struct()), err
}

func (s Alert) HasAnnotations() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Alert) SetAnnotations(v Map) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewAnnotations sets the annotations field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s Alert) NewAnnotations() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Alert) Status() AlertStatus {
	return AlertStatus(capnp.Struct(s).Uint16(0))
}

func (s Alert) SetStatus(v AlertStatus) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Alert) StartTime() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Alert) SetStartTime(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Alert) EndTime() int64 {
	return int64(capnp.Struct(s).Uint64(16))
}

func (s Alert) SetEndTime(v int64) {
	capnp.Struct(s).SetUint64(16, uint64(v))
}

// Alert_List is a list of Alert.
type Alert_List = capnp.StructList[Alert]

// NewAlert creates a new list of Alert.
func NewAlert_List(s *capnp.Segment, sz int32) (Alert_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[Alert](l), err
}

// Alert_Future is a wrapper for a Alert promised by a client call.
type Alert_Future struct{ *capnp.Future }

func (f Alert_Future) Struct() (Alert, error) {
	p, err := f.Future.Ptr()
	return Alert(p.Struct()), err
}
func (p Alert_Future) Labels() Map_Future {
	return Map_Future{Future: p.Future.Field(0, nil)}
}
func (p Alert_Future) Annotations() Map_Future {
	return Map_Future{Future: p.Future.Field(1, nil)}
}

type AlertStatus uint16

// AlertStatus_TypeID is the unique identifier for the type AlertStatus.
const AlertStatus_TypeID = 0x8b4db636305301a6

// Values of AlertStatus.
const (
	AlertStatus_firing   AlertStatus = 0
	AlertStatus_resolved AlertStatus = 1
)

// String returns the enum's constant name.
func (c AlertStatus) String() string {
	switch c {
	case AlertStatus_firing:
		return "firing"
	case AlertStatus_resolved:
		return "resolved"

	default:
		return ""
	}
}

// AlertStatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AlertStatusFromString(c string) AlertStatus {
	switch c {
	case "firing":
		return AlertStatus_firing
	case "resolved":
		return AlertStatus_resolved

	default:
		return 0
	}
}

type AlertStatus_List = capnp.EnumList[AlertStatus]

func NewAlertStatus_List(s *capnp.Segment, sz int32) (AlertStatus_List, error) {
	return capnp.NewEnumList[AlertStatus](s, sz)
}

type Map capnp.Struct

// Map_TypeID is the unique identifier for the type Map.
const Map_TypeID = 0xd15e0ab5486a2241

func NewMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map(st), err
}

func NewRootMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map(st), err
}

func ReadRootMap(msg *capnp.Message) (Map, error) {
	root, err := msg.Root()
	return Map(root.Struct()), err
}

func (s Map) String() string {
	str, _ := text.Marshal(0xd15e0ab5486a2241, capnp.Struct(s))
	return str
}

func (s Map) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Map) DecodeFromPtr(p capnp.Ptr) Map {
	return Map(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Map) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Map) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Map) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Map) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Map) Entries() (Map_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Map_Entry_List(p.List()), err
}

func (s Map) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Map) SetEntries(v Map_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Map_Entry_List, preferring placement in s's segment.
func (s Map) NewEntries(n int32) (Map_Entry_List, error) {
	l, err := NewMap_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Map_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Map_List is a list of Map.
type Map_List = capnp.StructList[Map]

// NewMap creates a new list of Map.
func NewMap_List(s *capnp.Segment, sz int32) (Map_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Map](l), err
}

// Map_Future is a wrapper for a Map promised by a client call.
type Map_Future struct{ *capnp.Future }

func (f Map_Future) Struct() (Map, error) {
	p, err := f.Future.Ptr()
	return Map(p.Struct()), err
}

type Map_Entry capnp.Struct

// Map_Entry_TypeID is the unique identifier for the type Map_Entry.
const Map_Entry_TypeID = 0xe450011b48235af4

func NewMap_Entry(s *capnp.Segment) (Map_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Map_Entry(st), err
}

func NewRootMap_Entry(s *capnp.Segment) (Map_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Map_Entry(st), err
}

func ReadRootMap_Entry(msg *capnp.Message) (Map_Entry, error) {
	root, err := msg.Root()
	return Map_Entry(root.Struct()), err
}

func (s Map_Entry) String() string {
	str, _ := text.Marshal(0xe450011b48235af4, capnp.Struct(s))
	return str
}

func (s Map_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Map_Entry) DecodeFromPtr(p capnp.Ptr) Map_Entry {
	return Map_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Map_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Map_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Map_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Map_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Map_Entry) Key() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Map_Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Map_Entry) SetKey(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Map_Entry) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Map_Entry) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Map_Entry) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Map_Entry_List is a list of Map_Entry.
type Map_Entry_List = capnp.StructList[Map_Entry]

// NewMap_Entry creates a new list of Map_Entry.
func NewMap_Entry_List(s *capnp.Segment, sz int32) (Map_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Map_Entry](l), err
}

// Map_Entry_Future is a wrapper for a Map_Entry promised by a client call.
type Map_Entry_Future struct{ *capnp.Future }

func (f Map_Entry_Future) Struct() (Map_Entry, error) {
	p, err := f.Future.Ptr()
	return Map_Entry(p.Struct()), err
}
func (p Map_Entry_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p Map_Entry_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_bca48e54c9238692 = "x\xda\xacROk\x13_\x14=\xe7\xcd\x9b_\xf2\x93" +
	"\xd4f\xfa\"E\xac\xa4\xa4\x15+h\xadUT\x82\x90" +
	"\xb6(\x14\xa5\x90\xd7).\\\x14\xa6v\x94h:i" +
	"3\xd3j\x16\xc5?\xa0 \x82b\xa1\xdf@\xfc\x00\x82" +
	"\xaeDP(Xp\xd3\x85\x0b\xf7\xae\x04\x17\x8a;\x17" +
	"#o\xd4dJ]\xba\x98a\xde\x99s\xcf}\xf7\x9c" +
	";\xf2\x98c\xf2X\xd7Q\x1bB\x9f\xb1\xff\x8b\x9f\xd1" +
	"\x1d9\xf9r\xea!\x9c\x9c\x88\xd7\xee\x0fl\xce<z" +
	"\xfa\x0a\xa0Z\x15o\xd5=\x91\x01\xd4\x1dq\x0a\x8cg" +
	"?\xaf\xfd\xf8r\xfb\xf5:\x9c\x1c;D\x9b\x86\xf1@" +
	"|S\xeb\x09\xf7\x89\xa8\x80q\xa9+\xf7u\xf2\xec\x9e" +
	"\x0d\xe8\x1c\xad\x149\xa1\xbc\x11kj\xd3|\x1d\xdf\x10" +
	"E\x82\xf1x\xe9\xda\xe4\x8b]\xb3[;\x94\xf3T\x0b" +
	"\xf2\xaeZ\x92\xbd\x80j\xc9\x0a\xa0>\xc8\xde\xf8\xfb\xa5" +
	"\x81\xc9}\xac~\x82\x93O\x15\xdb\xc2\xf0\xb7\xe4s\xf5" +
	"Qf\x12\xe6\x0d4b\xaf\xee7\xa3\xe1\xcb\x9eX\x0c" +
	"\x16\xcb\xe3\xe6\xe0F^\xb4\x1c\xa2J\xea,\x05\xe08" +
	"e\x80t\xfe?\x0fT\xae\xd4\x9a\xb5\xe0j\xdc\xf4\xc3" +
	"F}\xc5\x9f\x07\xb0]\xa1\xda\x08\xa3D%\x9c\xf6\x8b" +
	"K\xcb~\x18\x19\x1diI@\x12p\xba\xca\x80\xceZ" +
	"\xd4\x83\x82\x95\xa42\xe4n\xb0j\x91\xf9\x8e+\xa0\x01" +
	"\xdb\xca\xfcs7&j\x85\xb6\xda\xaaQ\xbbiQ\xbf" +
	"\x17t\xc8\x02\x0d\xb89\x07\xe8w\x16\xdd>\x0aR\x14" +
	"\xcc\x0cj/\xcb\x80[\xa0E\xb7\x9f\x82\x8e\xc5\x02-" +
	"@\xed\xe74\xe0\xf6\x19|\xc8\xe0R\x14(\x01u\x80" +
	"\x13\x80\xdbo\xf0\xc3\x14\xac\xd4\xbd9\xbf\x1e2\xdf\xb1" +
	"\x13\x18\xa3\xc3\xa2\x96\x82i\xd0\xe1A\x9d%\x8dy\x96" +
	"y\xe7-2\x07\x91<y3S\x104\"/\xaa!" +
	"\xd3\x08\xfe\x81^%L\xd2bwgOAv\x83q" +
	"\x18y\xcdh\xa6\xb6\x00\xfa\xb4!h\x83\xb7\xfc`~" +
	"\xa6\xb6\xd0>o7x\xca[\x84\x96dj}8Z" +
	"<\x17D\xcdV:\xc0\x89\xdf\x01\x9e\x16F/j\xd6" +
	"\xfcT\x82\xed\xd2\xbfNc\xe21\xdc\xf1,\x1d\xbb\xe4" +
	"\xd8\xa3\x99\x0b~\xabx\xd1\xab/\xfb;\xae2\xfc\xab" +
	"s\xb2\x85\xed\xe6\x87J\x80\x1e\xb4\xa8GRy\x1f\x19" +
	"\x05\xf4\x90E}B0s\xddo\xb1\x87\xdb\x1cd\x0f" +
	"X\\1M\xd8c\xef\xfc\xf53\x00\x00\xff\xff\xf8\xad" +
	"\xe3^"

func init() {
	schemas.Register(schema_bca48e54c9238692,
		0x8b4db636305301a6,
		0x95be80edfb92ea5e,
		0xc5154448f10c0d22,
		0xd15e0ab5486a2241,
		0xe450011b48235af4)
}
