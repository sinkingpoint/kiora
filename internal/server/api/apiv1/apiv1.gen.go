// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Defines values for AlertStatus.
const (
	Acked    AlertStatus = "acked"
	Firing   AlertStatus = "firing"
	Resolved AlertStatus = "resolved"
	Silenced AlertStatus = "silenced"
	TimedOut AlertStatus = "timed out"
)

// Defines values for GetAlertsParamsOrder.
const (
	ASC  GetAlertsParamsOrder = "ASC"
	DESC GetAlertsParamsOrder = "DESC"
)

// Alert defines model for Alert.
type Alert struct {
	Acknowledgement *AlertAcknowledgement `json:"acknowledgement,omitempty"`
	Annotations     map[string]string     `json:"annotations"`
	EndsAt          *time.Time            `json:"endsAt,omitempty"`
	Id              *string               `json:"id,omitempty"`
	Labels          map[string]string     `json:"labels"`
	StartsAt        time.Time             `json:"startsAt"`
	Status          AlertStatus           `json:"status"`
	TimeoutDeadline *time.Time            `json:"timeoutDeadline,omitempty"`
}

// AlertStatus defines model for Alert.Status.
type AlertStatus string

// AlertAcknowledgement defines model for AlertAcknowledgement.
type AlertAcknowledgement struct {
	AlertID *string `json:"alertID,omitempty"`
	Comment string  `json:"comment"`
	Creator string  `json:"creator"`
}

// Matcher defines model for Matcher.
type Matcher struct {
	IsNegative bool   `json:"isNegative"`
	IsRegex    bool   `json:"isRegex"`
	Label      string `json:"label"`
	Value      string `json:"value"`
}

// Silence defines model for Silence.
type Silence struct {
	Comment  string    `json:"comment"`
	Creator  string    `json:"creator"`
	EndsAt   time.Time `json:"endsAt"`
	Id       *string   `json:"id,omitempty"`
	Matchers []Matcher `json:"matchers"`
	StartsAt time.Time `json:"startsAt"`
}

// StatsResult defines model for StatsResult.
type StatsResult struct {
	Frames [][]float32       `json:"frames"`
	Labels map[string]string `json:"labels"`
}

// AcknowledgeAlert defines model for AcknowledgeAlert.
type AcknowledgeAlert = AlertAcknowledgement

// PostAlerts defines model for PostAlerts.
type PostAlerts = []Alert

// PostSilence defines model for PostSilence.
type PostSilence = Silence

// GetAlertsParams defines parameters for GetAlerts.
type GetAlertsParams struct {
	// Limit The maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset into the results to return. Used for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort The fields to sort the results by
	Sort *[]string `form:"sort,omitempty" json:"sort,omitempty"`

	// Order The order of the results. Only valid if `sort` is also specified.
	Order *GetAlertsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Id Get only the given alert by ID
	Id *string `form:"id,omitempty" json:"id,omitempty"`
}

// GetAlertsParamsOrder defines parameters for GetAlerts.
type GetAlertsParamsOrder string

// PostAlertsJSONBody defines parameters for PostAlerts.
type PostAlertsJSONBody = []Alert

// GetAlertsStatsParams defines parameters for GetAlertsStats.
type GetAlertsStatsParams struct {
	Type string `form:"type" json:"type"`

	// Args The arguments to the query, depending on the query type.
	Args *map[string]string `form:"args,omitempty" json:"args,omitempty"`
}

// PostAlertsJSONRequestBody defines body for PostAlerts for application/json ContentType.
type PostAlertsJSONRequestBody = PostAlertsJSONBody

// PostAlertsAckJSONRequestBody defines body for PostAlertsAck for application/json ContentType.
type PostAlertsAckJSONRequestBody = AlertAcknowledgement

// PostSilencesJSONRequestBody defines body for PostSilences for application/json ContentType.
type PostSilencesJSONRequestBody = Silence

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get alerts details
	// (GET /alerts)
	GetAlerts(w http.ResponseWriter, r *http.Request, params GetAlertsParams)
	// Add, or update alerts
	// (POST /alerts)
	PostAlerts(w http.ResponseWriter, r *http.Request)
	// Acknowledge an alert
	// (POST /alerts/ack)
	PostAlertsAck(w http.ResponseWriter, r *http.Request)
	// Query aggregated stats about alerts in the system
	// (GET /alerts/stats)
	GetAlertsStats(w http.ResponseWriter, r *http.Request, params GetAlertsStatsParams)
	// Get silences
	// (GET /silences)
	GetSilences(w http.ResponseWriter, r *http.Request)
	// Silence alerts
	// (POST /silences)
	PostSilences(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAlerts operation middleware
func (siw *ServerInterfaceWrapper) GetAlerts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlertsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlerts(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostAlerts operation middleware
func (siw *ServerInterfaceWrapper) PostAlerts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAlerts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostAlertsAck operation middleware
func (siw *ServerInterfaceWrapper) PostAlertsAck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAlertsAck(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAlertsStats operation middleware
func (siw *ServerInterfaceWrapper) GetAlertsStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlertsStatsParams

	// ------------- Required query parameter "type" -------------

	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "args" -------------

	err = runtime.BindQueryParameter("form", true, false, "args", r.URL.Query(), &params.Args)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "args", Err: err})
		return
	}

	handler := func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlertsStats(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSilences operation middleware
func (siw *ServerInterfaceWrapper) GetSilences(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSilences(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostSilences operation middleware
func (siw *ServerInterfaceWrapper) PostSilences(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSilences(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/alerts", wrapper.GetAlerts).Methods("GET")

	r.HandleFunc(options.BaseURL+"/alerts", wrapper.PostAlerts).Methods("POST")

	r.HandleFunc(options.BaseURL+"/alerts/ack", wrapper.PostAlertsAck).Methods("POST")

	r.HandleFunc(options.BaseURL+"/alerts/stats", wrapper.GetAlertsStats).Methods("GET")

	r.HandleFunc(options.BaseURL+"/silences", wrapper.GetSilences).Methods("GET")

	r.HandleFunc(options.BaseURL+"/silences", wrapper.PostSilences).Methods("POST")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYW5PUthL+KyqdU3VefHYWzsnLvA1sitpKkRCG5IVQocdqe8XKkpHau0xR899TLd+x",
	"zC5LIG++yN1ff333R5m7qnYWLQW5/Sg9vm8w0BOnNMYHu/zauluDqsSdQU/8LHeW0MZLqGujcyDt7OZd",
	"cJafhfwKK+Crf3ss5Fb+azMq2bRvwyZKm0ivWOLpdMqkwpB7XbNMuZXPkUABgbi9Qitg+EDbUoAVEEGd",
	"MvnCBYoywxdB1IRVuBdWVkLHGuVWgvdwTIFtAQhyApTKhPOiqRUQCm0FXaEIx0BYnfV499qgzfFv47SX",
	"l0ImQvuyAyf5SPdd9HPv3Nq7Gj117odPHPQgp2YSrHUULWqlKqX5BsyLmbaO3kBe23LCtzu8wzwKQqvC",
	"LsIonK+A5FYyv/8lXaHMlgK0aqMa1C/WHOWWfIOJYwYOaL4SWiDw9EXgAgE1UTrappLb17LQ8V3GvKOS",
	"mfQYnLmJlyxFCdeQzGTnSyXfJMTyQdfQBYIy2uIqnjtYOWWxGmiPiqFpxtDxNHfoYMiEgyWKNwnKkuGy",
	"jEE+dXmx9EImb70mHG04ZVzOeikLYnKPQM4n3n1ia69x/GQUnLLjOVB+hX4JXYefsQTSNzhRenDOINgY",
	"nuEllvgh/TKSnTTkBkyDd5vRCuiPj9qyKa6UPZO6NLfnYex+s7StWt7DvQt576hFKf/y9E2lxzJaZinR",
	"sTDBnSSfgMJLDI1J5ELhocK5vcPFgLowDmhEbJvqkLb50/uvL4OpCOTC0OFe2stfaFu4KFyT4Xe/PxKu",
	"ED9p5+E/QexeXHIMow9tJ3t0dn52zqpdjRZqLbfyf/FRJmugqwhzA8MkUGKkcd4NX8E1Bh4fXN1aKQpt",
	"CH0mjK40cedWyCZmAqwShUajQrz0SI23oZ07gjhA4KLM3d0F/MPKCMvHynip5FY+w34qYXjMAsWAfb2A",
	"dIWigg+6airReoxJ8DEO4kTRaubk5ePvG/RHmUkLFVMWYctsMid0PGtLWLL3T1lKoyuKgCS0JRcHlIW+",
	"M/EbW1g4L2ootY2WrYBohT0ARccvORGcpxmQw3FFGZ+cqRryYC1G+6ktTQQ7nBmfKD8TXH3EDRithC7E",
	"W9b5Vmj2fnAi1JjrQqM6W+ODZc4w9n1+t38qM3nx4/5pooMvAT5DEo6hMLhS32A394rDUcQ2ldIeK9LC",
	"E4OSN3G4qJ0NbWY/Pj//BwfnZ466lOLT/2+xzI9c2tYR0UwxyaVTJn9IffAE8mveEi6eiAK0wW7mbaoK",
	"/LFjtUtjhQTaRFG1C9H6eRpPtotssiQd1wiY7VGbydenBe2Pl8i7NQLyHGvqsq+vyONW0UV3kqxegufV",
	"I/K2StMerWKaOLZg2F/4LjdNIPRp9nbzBad33inri+8G8uvYwO4gdJdfP4TTxWK6ZPZRovD3RopbCCI0",
	"OYZQNMYcJ5slqlVa965C0W6jEESlQ2DmCu+qlr5BRr/4pAPTO1A5BBpon323wveIb7L3TujmIXza8Vb6",
	"UBwvls0oVUFi0k4bejuGrdeUZGUFXzZs1hBWUUsmFNZd5Dk7Phcsc62ggi/DrKjde0zBD1DVpt2FYqf/",
	"czgyri5xGet3sMRs811K5nT8u0fh3E9CmNnSqEQbCWsxPPdJ7d2NVqjELY61IhacuUtWg5nFNVahN0f2",
	"JScHD0VdELd/baKY+MNmrBJjZP8alUBZet5JevwCDq4ZCvTs/0kb9t0O/NmQ3/dnvovn+r8vd3vt5TBF",
	"mtauHueyQ42vPtebZoY+oDtNsKeK6Lf+O/Vq5CBW1rhILUpgJ2CMotPprwAAAP//Viyak8AUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
