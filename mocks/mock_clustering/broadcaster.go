// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/clustering/broadcaster.go

// Package mock_clustering is a generated GoMock package.
package mock_clustering

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mux "github.com/gorilla/mux"
	clustering "github.com/sinkingpoint/kiora/internal/clustering"
	model "github.com/sinkingpoint/kiora/lib/kiora/model"
	grpc "google.golang.org/grpc"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockServer) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockServerMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockServer)(nil).Address))
}

// Name mocks base method.
func (m *MockServer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServer)(nil).Name))
}

// String mocks base method.
func (m *MockServer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockServerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockServer)(nil).String))
}

// MockClusterMemberTracker is a mock of ClusterMemberTracker interface.
type MockClusterMemberTracker struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMemberTrackerMockRecorder
}

// MockClusterMemberTrackerMockRecorder is the mock recorder for MockClusterMemberTracker.
type MockClusterMemberTrackerMockRecorder struct {
	mock *MockClusterMemberTracker
}

// NewMockClusterMemberTracker creates a new mock instance.
func NewMockClusterMemberTracker(ctrl *gomock.Controller) *MockClusterMemberTracker {
	mock := &MockClusterMemberTracker{ctrl: ctrl}
	mock.recorder = &MockClusterMemberTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterMemberTracker) EXPECT() *MockClusterMemberTrackerMockRecorder {
	return m.recorder
}

// GetMembers mocks base method.
func (m *MockClusterMemberTracker) GetMembers(ctx context.Context) ([]clustering.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", ctx)
	ret0, _ := ret[0].([]clustering.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockClusterMemberTrackerMockRecorder) GetMembers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockClusterMemberTracker)(nil).GetMembers), ctx)
}

// MockBroadcaster is a mock of Broadcaster interface.
type MockBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcasterMockRecorder
}

// MockBroadcasterMockRecorder is the mock recorder for MockBroadcaster.
type MockBroadcasterMockRecorder struct {
	mock *MockBroadcaster
}

// NewMockBroadcaster creates a new mock instance.
func NewMockBroadcaster(ctrl *gomock.Controller) *MockBroadcaster {
	mock := &MockBroadcaster{ctrl: ctrl}
	mock.recorder = &MockBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcaster) EXPECT() *MockBroadcasterMockRecorder {
	return m.recorder
}

// BroadcastAlerts mocks base method.
func (m *MockBroadcaster) BroadcastAlerts(ctx context.Context, alerts ...model.Alert) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range alerts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BroadcastAlerts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastAlerts indicates an expected call of BroadcastAlerts.
func (mr *MockBroadcasterMockRecorder) BroadcastAlerts(ctx interface{}, alerts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, alerts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastAlerts", reflect.TypeOf((*MockBroadcaster)(nil).BroadcastAlerts), varargs...)
}

// RegisterEndpoints mocks base method.
func (m *MockBroadcaster) RegisterEndpoints(ctx context.Context, router *mux.Router, grcpServer *grpc.Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEndpoints", ctx, router, grcpServer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterEndpoints indicates an expected call of RegisterEndpoints.
func (mr *MockBroadcasterMockRecorder) RegisterEndpoints(ctx, router, grcpServer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEndpoints", reflect.TypeOf((*MockBroadcaster)(nil).RegisterEndpoints), ctx, router, grcpServer)
}
