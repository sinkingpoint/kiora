// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/clustering/clusterer.go

// Package mock_clustering is a generated GoMock package.
package mock_clustering

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sinkingpoint/kiora/lib/kiora/model"
)

// MockClusterer is a mock of Clusterer interface.
type MockClusterer struct {
	ctrl     *gomock.Controller
	recorder *MockClustererMockRecorder
}

// MockClustererMockRecorder is the mock recorder for MockClusterer.
type MockClustererMockRecorder struct {
	mock *MockClusterer
}

// NewMockClusterer creates a new mock instance.
func NewMockClusterer(ctrl *gomock.Controller) *MockClusterer {
	mock := &MockClusterer{ctrl: ctrl}
	mock.recorder = &MockClustererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterer) EXPECT() *MockClustererMockRecorder {
	return m.recorder
}

// AmIAuthoritativeFor mocks base method.
func (m *MockClusterer) AmIAuthoritativeFor(a *model.Alert) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmIAuthoritativeFor", a)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AmIAuthoritativeFor indicates an expected call of AmIAuthoritativeFor.
func (mr *MockClustererMockRecorder) AmIAuthoritativeFor(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmIAuthoritativeFor", reflect.TypeOf((*MockClusterer)(nil).AmIAuthoritativeFor), a)
}
