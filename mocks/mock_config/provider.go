// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/kiora/config/provider.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/sinkingpoint/kiora/lib/kiora/config"
	model "github.com/sinkingpoint/kiora/lib/kiora/model"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotifier) Notify(ctx context.Context, alerts ...model.Alert) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range alerts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Notify", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(ctx interface{}, alerts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, alerts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), varargs...)
}

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetNotifiersForAlert mocks base method.
func (m *MockConfig) GetNotifiersForAlert(ctx context.Context, alert *model.Alert) []config.NotifierSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifiersForAlert", ctx, alert)
	ret0, _ := ret[0].([]config.NotifierSettings)
	return ret0
}

// GetNotifiersForAlert indicates an expected call of GetNotifiersForAlert.
func (mr *MockConfigMockRecorder) GetNotifiersForAlert(ctx, alert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifiersForAlert", reflect.TypeOf((*MockConfig)(nil).GetNotifiersForAlert), ctx, alert)
}

// ValidateData mocks base method.
func (m *MockConfig) ValidateData(ctx context.Context, data config.Fielder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateData indicates an expected call of ValidateData.
func (mr *MockConfigMockRecorder) ValidateData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateData", reflect.TypeOf((*MockConfig)(nil).ValidateData), ctx, data)
}
