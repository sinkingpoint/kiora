// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/kiora/kioradb/db.go

// Package mock_kioradb is a generated GoMock package.
package mock_kioradb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	query "github.com/sinkingpoint/kiora/lib/kiora/kioradb/query"
	model "github.com/sinkingpoint/kiora/lib/kiora/model"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// QueryAlerts mocks base method.
func (m *MockDB) QueryAlerts(ctx context.Context, query query.AlertFilter) []model.Alert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAlerts", ctx, query)
	ret0, _ := ret[0].([]model.Alert)
	return ret0
}

// QueryAlerts indicates an expected call of QueryAlerts.
func (mr *MockDBMockRecorder) QueryAlerts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAlerts", reflect.TypeOf((*MockDB)(nil).QueryAlerts), ctx, query)
}

// QuerySilences mocks base method.
func (m *MockDB) QuerySilences(ctx context.Context, query query.SilenceFilter) []model.Silence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySilences", ctx, query)
	ret0, _ := ret[0].([]model.Silence)
	return ret0
}

// QuerySilences indicates an expected call of QuerySilences.
func (mr *MockDBMockRecorder) QuerySilences(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySilences", reflect.TypeOf((*MockDB)(nil).QuerySilences), ctx, query)
}

// StoreAlerts mocks base method.
func (m *MockDB) StoreAlerts(ctx context.Context, alerts ...model.Alert) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range alerts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreAlerts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAlerts indicates an expected call of StoreAlerts.
func (mr *MockDBMockRecorder) StoreAlerts(ctx interface{}, alerts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, alerts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAlerts", reflect.TypeOf((*MockDB)(nil).StoreAlerts), varargs...)
}

// StoreSilences mocks base method.
func (m *MockDB) StoreSilences(ctx context.Context, silences ...model.Silence) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range silences {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreSilences", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSilences indicates an expected call of StoreSilences.
func (mr *MockDBMockRecorder) StoreSilences(ctx interface{}, silences ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, silences...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSilences", reflect.TypeOf((*MockDB)(nil).StoreSilences), varargs...)
}
