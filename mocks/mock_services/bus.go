// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/bus.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
	clustering "github.com/sinkingpoint/kiora/internal/clustering"
	kioradb "github.com/sinkingpoint/kiora/lib/kiora/kioradb"
)

// MockBus is a mock of Bus interface.
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *MockBusMockRecorder
}

// MockBusMockRecorder is the mock recorder for MockBus.
type MockBusMockRecorder struct {
	mock *MockBus
}

// NewMockBus creates a new mock instance.
func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &MockBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBus) EXPECT() *MockBusMockRecorder {
	return m.recorder
}

// Broadcaster mocks base method.
func (m *MockBus) Broadcaster() clustering.Broadcaster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcaster")
	ret0, _ := ret[0].(clustering.Broadcaster)
	return ret0
}

// Broadcaster indicates an expected call of Broadcaster.
func (mr *MockBusMockRecorder) Broadcaster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcaster", reflect.TypeOf((*MockBus)(nil).Broadcaster))
}

// DB mocks base method.
func (m *MockBus) DB() kioradb.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(kioradb.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockBusMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockBus)(nil).DB))
}

// Logger mocks base method.
func (m *MockBus) Logger(serviceName string) *zerolog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger", serviceName)
	ret0, _ := ret[0].(*zerolog.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockBusMockRecorder) Logger(serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockBus)(nil).Logger), serviceName)
}
